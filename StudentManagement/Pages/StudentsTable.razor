@page "/students-table"
@using System.ComponentModel
@using AntDesign
@using Shares.Constants
@using System.Globalization
@using Shares.Models

<style>
    .student-form {
        display: flex;
        flex-direction: column;
        gap: 16px;
        max-width: 400px;
        margin: 0 auto;
        padding: 24px;
        background: #f0f2f5;
        border: 1px solid #d9d9d9;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .form-item {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

        .form-item Input,
        .form-item Select,
        .form-item DatePicker {
            width: 100%;
        }
</style>

<h3>StudentManager</h3>
<br />
<div>
    <Button Icon="@IconType.Outline.Plus" Type="ButtonType.Primary" @onclick="() => Open()">New account</Button>
    <Drawer Closable="true" Width="720" Visible="@visible" OnClose="Close">
        <Template style="height:90%">
            <h3>@(isEditMode ? "Edit Student" : "Add Student")</h3>
            <br />
            @if (messageAdd != null)
            {
                <Alert Message="@messageAdd" Type="AlertType.Info" ShowIcon="true" />
            }
            <br />
            <div class="student-form">
                <div class="form-item">
                    <Text>Id:</Text>
                    <Input @bind-Value="@studentId" OnChange="@OnStudentIdChange" Disabled="@isEditMode" />
                    @if (isSubmitted && string.IsNullOrEmpty(studentId))
                    {
                        <Alert Message="Id is required" Type="AlertType.Error" ShowIcon="true" />
                    }
                    @if (!string.IsNullOrEmpty(studentIdError))
                    {
                        <Alert Message="@studentIdError" Type="AlertType.Error" ShowIcon="true" />
                    }
                </div>

                <div class="form-item">
                    <Text>Name:</Text>
                    <Input @bind-Value="@studentName" />
                    @if (isSubmitted && string.IsNullOrEmpty(studentName))
                    {
                        <Alert Message="Name is required" Type="AlertType.Error" ShowIcon="true" />
                    }
                </div>

                <div class="form-item">
                    <Text>Date of birth:</Text>
                    <DatePicker @bind-Value="@studentDob" Format="@AppConstants.DATE_FORMAT" OnChange="@OnStudentDobChange" />
                    @if (isSubmitted && studentDob == default)
                    {
                        <Alert Message="Date of birth is required" Type="AlertType.Error" ShowIcon="true" />
                    }
                </div>

                <div class="form-item">
                    <Text>Address:</Text>
                    <Input @bind-Value="@studentAddress" />
                    @if (isSubmitted && string.IsNullOrEmpty(studentAddress))
                    {
                        <Alert Message="Address is required" Type="AlertType.Error" ShowIcon="true" />
                    }
                </div>

                <div class="form-item">
                    <Text>Class:</Text>
                    <Select TItem="Class"
                            TItemValue="int"
                            DataSource="@classList"
                            @bind-Value="@selectedClassId"
                            ValueName="@nameof(Class.Id)"
                            LabelName="@nameof(Class.Name)"
                            GroupName="@nameof(Class.Subject)"
                            SortByLabel="SortDirection.Ascending"
                            SortByGroup="SortDirection.Ascending"
                            OnSelectedItemChanged="OnSelectedItemChangedHandler"
                            DefaultActiveFirstOption="true"
                            Style="width: 100%;">
                    </Select>
                    @if (isSubmitted && selectedClassId == 0)
                    {
                        <Alert Message="Class is required" Type="AlertType.Error" ShowIcon="true" />
                    }
                </div>

                <Button Type="ButtonType.Primary" OnClick="SubmitForm">
                    @(isEditMode ? "Update" : "Submit")
                </Button>
            </div>
        </Template>
    </Drawer>
</div>
<br />


@if (messageDelete != null)
{
    <Alert Message="@messageDelete" Type="AlertType.Success" ShowIcon="true" />
}
<br />

<Table DataSource="@students" Bordered="true" Size="TableSize.Middle">
    <PropertyColumn Property="s=>s.Id"></PropertyColumn>
    <PropertyColumn Property="c=>c.Name"></PropertyColumn>
    <PropertyColumn Property="c=>c.DateOfBirth"></PropertyColumn>
    <PropertyColumn Property="c=>c.Address"></PropertyColumn>
    <PropertyColumn Property="c => c.Class.Name" Title="Class Name"></PropertyColumn>
    <ActionColumn Title="Action">
        <Space Size="SpaceSize.Middle">
            <SpaceItem>
                <button @onclick="() => UpdateStudent(context, context.Class)" class="btn btn-primary">Update</button>
            </SpaceItem>
            <SpaceItem>
                <button @onclick="() => DeleteStudent(context.Id)" class="btn btn-danger">Delete</button>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>
